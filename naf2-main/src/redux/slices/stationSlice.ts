import { createSlice, createAsyncThunk, PayloadAction } from "@reduxjs/toolkit";
import axios from "axios";
import type { RootState } from "../../redux/store"; // Adjust path as needed

interface Station {
  id?: string;
  CODE_STATION: string;
  NOM_STATION: string;
  CODE_DISTRICT: string;
  CODE_WILAYA: string;
  TYPE_ACTIVITE: number;
  ETATS: number;
  [key: string]: any;
}

interface StationState {
  stations: Station[];
  loading: boolean;
  error: string | null;
}

const initialState: StationState = {
  stations: [],
  loading: false,
  error: null,
};

const API_BASE_URL = "http://localhost:5000";

// Fetch all stations
export const fetchStations = createAsyncThunk<
  Station[],
  void,
  { rejectValue: string }
>(
  "stations/fetchStations",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/getAllStation`);
      return response.data;
    } catch (err: any) {
      return rejectWithValue(
        err.response?.data?.message || "Failed to fetch stations"
      );
    }
  }
);

// Update a station (etat and activite)
export const updateStation = createAsyncThunk<
  Station,
  { CODE_STATION: string; ETATS: number; TYPE_ACTIVITE: number },
  { rejectValue: string }
>(
  "stations/updateStation",
  async ({ CODE_STATION, ETATS, TYPE_ACTIVITE }, { rejectWithValue }) => {
    try {
      const response = await axios.put(
        `${API_BASE_URL}/api/updateStation/${CODE_STATION}`,
        { ETATS, TYPE_ACTIVITE }
      );
      return response.data;
    } catch (err: any) {
      return rejectWithValue(
        err.response?.data?.message || "Failed to update station"
      );
    }
  }
);

export const addStation = createAsyncThunk<
  Station,
  Omit<Station, "id">, // station data without id (assumed generated by backend)
  { rejectValue: string }
>(
  "stations/addStation",
  async (newStationData, { rejectWithValue }) => {
    try {
      const response = await axios.post(
        `${API_BASE_URL}/api/addStation`,
        newStationData
      );
      return response.data;
    } catch (err: any) {
      return rejectWithValue(
        err.response?.data?.message || "Failed to add station"
      );
    }
  }
);

const stationSlice = createSlice({
  name: "stations",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      // fetchStations
      .addCase(fetchStations.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchStations.fulfilled, (state, action: PayloadAction<Station[]>) => {
        state.loading = false;
        state.stations = action.payload;
      })
      .addCase(fetchStations.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload ?? "Unknown error";
      })

      // updateStation
      .addCase(updateStation.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(updateStation.fulfilled, (state, action: PayloadAction<Station>) => {
        state.loading = false;
        const updatedStation = action.payload;
        const index = state.stations.findIndex(
          (s) => s.CODE_STATION === updatedStation.CODE_STATION
        );
        if (index !== -1) {
          state.stations[index] = updatedStation;
        }
      })
      .addCase(updateStation.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload ?? "Unknown error";
      })
      // addStation
      .addCase(addStation.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(addStation.fulfilled, (state, action: PayloadAction<Station>) => {
        state.loading = false;
        state.stations.push(action.payload);
      })
      .addCase(addStation.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload ?? "Unknown error";
      });
  },
});

export const selectStations = (state: RootState) => state.stations.stations;
export const selectStationsLoading = (state: RootState) => state.stations.loading;
export const selectStationsError = (state: RootState) => state.stations.error;

export default stationSlice.reducer;
